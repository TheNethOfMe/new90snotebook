// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render the select drop-down 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DropDownGroup
    disabled={false}
    label="Email"
    name="email"
    onChange={[MockFunction]}
    options={
      Array [
        Object {
          "display": "Option One",
          "val": "one",
        },
        Object {
          "display": "Option Two",
          "val": "two",
        },
      ]
    }
    type="text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          className="input__label"
          htmlFor="email"
        >
          Email
        </label>,
        <select
          className="select__field"
          disabled={false}
          name="email"
          onChange={[MockFunction]}
        >
          <option
            value="one"
          >
            Option One
          </option>
          <option
            value="two"
          >
            Option Two
          </option>
        </select>,
        undefined,
        undefined,
      ],
      "className": "input",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Email",
          "className": "input__label",
          "htmlFor": "email",
        },
        "ref": null,
        "rendered": "Email",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value="one"
            >
              Option One
            </option>,
            <option
              value="two"
            >
              Option Two
            </option>,
          ],
          "className": "select__field",
          "disabled": false,
          "name": "email",
          "onChange": [MockFunction],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "one",
            "nodeType": "host",
            "props": Object {
              "children": "Option One",
              "value": "one",
            },
            "ref": null,
            "rendered": "Option One",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "two",
            "nodeType": "host",
            "props": Object {
              "children": "Option Two",
              "value": "two",
            },
            "ref": null,
            "rendered": "Option Two",
            "type": "option",
          },
        ],
        "type": "select",
      },
      undefined,
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="input__label"
            htmlFor="email"
          >
            Email
          </label>,
          <select
            className="select__field"
            disabled={false}
            name="email"
            onChange={[MockFunction]}
          >
            <option
              value="one"
            >
              Option One
            </option>
            <option
              value="two"
            >
              Option Two
            </option>
          </select>,
          undefined,
          undefined,
        ],
        "className": "input",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Email",
            "className": "input__label",
            "htmlFor": "email",
          },
          "ref": null,
          "rendered": "Email",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value="one"
              >
                Option One
              </option>,
              <option
                value="two"
              >
                Option Two
              </option>,
            ],
            "className": "select__field",
            "disabled": false,
            "name": "email",
            "onChange": [MockFunction],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "one",
              "nodeType": "host",
              "props": Object {
                "children": "Option One",
                "value": "one",
              },
              "ref": null,
              "rendered": "Option One",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "two",
              "nodeType": "host",
              "props": Object {
                "children": "Option Two",
                "value": "two",
              },
              "ref": null,
              "rendered": "Option Two",
              "type": "option",
            },
          ],
          "type": "select",
        },
        undefined,
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
