// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render the Login page 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    auth={
      Object {
        "isAuthenticated": false,
        "user": "test",
      }
    }
    errors={Object {}}
    loginUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Login
        </h1>,
        <form
          onSubmit={[Function]}
        >
          <TextFieldGroup
            disabled={false}
            label="Email"
            name="email"
            onChange={[Function]}
            placeholder="email"
            type="text"
            value=""
          />
          <TextFieldGroup
            disabled={false}
            label="Password"
            name="password"
            onChange={[Function]}
            placeholder="password"
            type="password"
            value=""
          />
          <input
            type="submit"
            value="Log In"
          />
        </form>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Login",
        },
        "ref": null,
        "rendered": "Login",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <TextFieldGroup
              disabled={false}
              label="Email"
              name="email"
              onChange={[Function]}
              placeholder="email"
              type="text"
              value=""
            />,
            <TextFieldGroup
              disabled={false}
              label="Password"
              name="password"
              onChange={[Function]}
              placeholder="password"
              type="password"
              value=""
            />,
            <input
              type="submit"
              value="Log In"
            />,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "disabled": false,
              "error": undefined,
              "label": "Email",
              "name": "email",
              "onChange": [Function],
              "placeholder": "email",
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "disabled": false,
              "error": undefined,
              "label": "Password",
              "name": "password",
              "onChange": [Function],
              "placeholder": "password",
              "type": "password",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "type": "submit",
              "value": "Log In",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Login
          </h1>,
          <form
            onSubmit={[Function]}
          >
            <TextFieldGroup
              disabled={false}
              label="Email"
              name="email"
              onChange={[Function]}
              placeholder="email"
              type="text"
              value=""
            />
            <TextFieldGroup
              disabled={false}
              label="Password"
              name="password"
              onChange={[Function]}
              placeholder="password"
              type="password"
              value=""
            />
            <input
              type="submit"
              value="Log In"
            />
          </form>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login",
          },
          "ref": null,
          "rendered": "Login",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <TextFieldGroup
                disabled={false}
                label="Email"
                name="email"
                onChange={[Function]}
                placeholder="email"
                type="text"
                value=""
              />,
              <TextFieldGroup
                disabled={false}
                label="Password"
                name="password"
                onChange={[Function]}
                placeholder="password"
                type="password"
                value=""
              />,
              <input
                type="submit"
                value="Log In"
              />,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "disabled": false,
                "error": undefined,
                "label": "Email",
                "name": "email",
                "onChange": [Function],
                "placeholder": "email",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "disabled": false,
                "error": undefined,
                "label": "Password",
                "name": "password",
                "onChange": [Function],
                "placeholder": "password",
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Log In",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
